import { useState, useEffect } from "react";
import axios from "axios";
import "../style/Borrow.css";

const Borrow = () => {
  const [borrowerName, setBorrowerName] = useState("");
  const [borrowerMail, setBorrowerMail] = useState("");
  const [borrowingDate, setBorrowingDate] = useState("");
  const [bookId, setBookId] = useState("");
  const [bookName, setBookName] = useState("");
  const [bookYear, setBookYear] = useState("");
  const [bookStock, setBookStock] = useState("");
  const [borrows, setBorrows] = useState([]);
  const [message, setMessage] = useState("");
  const [selectedBorrowId, setSelectedBorrowId] = useState(null);

  // √ñd√ºn√ß alƒ±nan kitaplarƒ± y√ºklemek i√ßin useEffect
  useEffect(() => {
    const fetchBorrows = async () => {
      try {
        const response = await axios.get(
          "https://awkward-abby-egitim-2c6ebaa9.koyeb.app/api/v1/borrows"
        );
        console.log(response.data);
        setBorrows(response.data);
      } catch (error) {
        console.error("√ñd√ºn√ß alƒ±nan kitaplar getirilemedi:", error);
      }
    };
    fetchBorrows();
  }, []);

  // Kitap √∂d√ºn√ß alma veya g√ºncelleme i≈ülemi
  const handleSubmit = async (e) => {
    e.preventDefault();

    // Stok kontrol√º
    if (parseInt(bookStock) <= 0) {
      setMessage("Bu kitabƒ±n stoƒüu t√ºkenmi≈ütir. L√ºtfen ba≈üka bir kitap se√ßin.");
      return;
    }

    const borrowData = {
      borrowerName,
      borrowerMail,
      borrowingDate,
      bookForBorrowingRequest: {
        id: bookId,
        name: bookName,
        publicationYear: parseInt(bookYear),
        stock: parseInt(bookStock),
      },
    };

    try {
      if (selectedBorrowId) {
        // G√ºncelleme i≈ülemi
        const response = await axios.put(
          `hhttps://awkward-abby-egitim-2c6ebaa9.koyeb.app/api/v1/borrows/${selectedBorrowId}`,
          borrowData
        );
        if (response.status === 200) {
          setBorrows((prev) =>
            prev.map((borrow) =>
              borrow.id === selectedBorrowId ? response.data : borrow
            )
          );
          setMessage("Kitap ba≈üarƒ±yla g√ºncellendi!");
        } else {
          setMessage("Kitap g√ºncellenemedi!");
        }
      } else {
        // Yeni kayƒ±t i≈ülemi
        const response = await axios.post(
          "https://awkward-abby-egitim-2c6ebaa9.koyeb.app/api/v1/borrows",
          borrowData
        );
        if (response.status === 201) {
          setBorrows([...borrows, response.data]);

          // Stok azaltma i≈ülemi
          setBookStock((prevStock) => prevStock - 1);

          setMessage("Kitap ba≈üarƒ±yla √∂d√ºn√ß alƒ±ndƒ±!");
        } else {
          setMessage("Kitap √∂d√ºn√ß alƒ±namadƒ±!");
        }
      }
      // Formu temizle
      resetForm();
    } catch (error) {
      setMessage("Bir hata olu≈ütu! L√ºtfen tekrar deneyin.");
      console.error("Kitap i≈ülemi hatasƒ±:", error);
    }
  };

  // Formu temizlemek i√ßin yardƒ±mcƒ± fonksiyon
  const resetForm = () => {
    setBorrowerName("");
    setBorrowerMail("");
    setBorrowingDate("");
    setBookId("");
    setBookName("");
    setBookYear("");
    setBookStock("");
    setSelectedBorrowId(null);
  };

  // Silme i≈ülemi
  const handleDelete = async (id) => {
    try {
      const response = await axios.delete(
        `https://awkward-abby-egitim-2c6ebaa9.koyeb.app/api/v1/borrows/${id}`
      );
      if (response.status === 200) {
        setBorrows((prev) => prev.filter((borrow) => borrow.id !== id));
        setMessage("Kitap ba≈üarƒ±yla silindi!");
      } else {
        setMessage("Kitap silinemedi!");
      }
    } catch (error) {
      setMessage("Bir hata olu≈ütu! L√ºtfen tekrar deneyin.");
      console.error("Kitap silme hatasƒ±:", error);
    }
  };

  // G√ºncelleme i√ßin se√ßilen √∂ƒüeyi form alanlarƒ±na y√ºkleme
  const handleEdit = (borrow) => {
    setBorrowerName(borrow.borrowerName);
    setBorrowerMail(borrow.borrowerMail);
    setBorrowingDate(borrow.borrowingDate);
    setBookId(borrow.book.id);
    setBookName(borrow.book.name);
    setBookYear(borrow.book.publicationYear);
    setBookStock(borrow.book.stock);
    setSelectedBorrowId(borrow.id);
  };

  return (
    <div className="borrow-container">
      <div>
        <h2>üìñ Kitap √ñd√ºn√ß Alma</h2>
        <p className="borrow-p">
          Burada istediƒüiniz kitabƒ± √∂d√ºn√ß almak i√ßin i≈ülem yapabilirsiniz.
        </p>
        <form onSubmit={handleSubmit} className="borrow-form">
          <input
            type="text"
            placeholder="Ad Soyad"
            value={borrowerName}
            onChange={(e) => setBorrowerName(e.target.value)}
            required
          />
          <input
            type="email"
            placeholder="E-posta"
            value={borrowerMail}
            onChange={(e) => setBorrowerMail(e.target.value)}
            required
          />
          <input
            type="date"
            placeholder="Tarih"
            value={borrowingDate}
            onChange={(e) => setBorrowingDate(e.target.value)}
            required
          />
          <input
            type="number"
            placeholder="Kitap ID"
            value={bookId}
            onChange={(e) => setBookId(e.target.value)}
            required
          />
          <input
            type="text"
            placeholder="Kitap Adƒ±"
            value={bookName}
            onChange={(e) => setBookName(e.target.value)}
            required
          />
          <input
            type="number"
            placeholder="Yayƒ±n Yƒ±lƒ±"
            value={bookYear}
            onChange={(e) => setBookYear(e.target.value)}
            required
          />
          <input
            type="number"
            placeholder="Stok"
            value={bookStock}
            onChange={(e) => setBookStock(e.target.value)}
            required
          />
          <button type="submit" className="borrow-button">
            {selectedBorrowId ? "G√ºncelle" : "√ñd√ºn√ß Al"}
          </button>
        </form>
      </div>

      {message && (
        <div
          className={`message ${
            message.includes("ba≈üarƒ±yla") ? "success" : "error"
          }`}
        >
          {message}
        </div>
      )}

      <div className="borrow-list">
        {borrows.map((borrow) => (
          <div className="borrow-card" key={borrow.id}>
            <h4>{borrow.book.name}</h4>
            <p>
              <strong>Ad:</strong> {borrow.borrowerName}
            </p>
            <p>
              <strong>Mail:</strong> {borrow.borrowerMail}
            </p>
            <p>
              <strong>Tarih:</strong> {borrow.borrowingDate}
            </p>
            <p>
              <strong>Kitap ID:</strong> {borrow.book.id}
            </p>
            <div className="button-container">
              <button
                className="update-button"
                onClick={() => handleEdit(borrow)}
              >
                G√ºncelle
              </button>
              <button
                className="delete-button"
                onClick={() => handleDelete(borrow.id)}
              >
                Sil
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Borrow;
